/*
Hint-
(1/2)
A string is incorrect if it contains a character that is not allowed
(2/2)
Constraints are small enough for brute force
*/

// Naive Solution- O(n^2)
class Solution {
    public int countConsistentStrings(String allowed, String[] words) {
        int n = words.length;
        int count = 0;

        HashSet<Character> allMap = new HashSet();
        for(int i=0; i<allowed.length(); i++) {
            allMap.add(allowed.charAt(i));
        }

        for(int i=0; i<n; i++) {
            int wLen = words[i].length();
            boolean flag = true;
            for(int j=0; j<wLen; j++) {
                if(allMap.contains(words[i].charAt(j))==false) {
                    flag = false;
                    break;
                }
            }
            if(flag == true) count++;
        }
        return count;
    }
}

// Efficient Solution- O(n)
class Solution {
    public int markCharactersOf(String word) {
        int result = 0;
        
        for (char ch : word.toCharArray()) {
            int position = ch - 'a';
            result |= 1 << position;
        }
        
        return result;
    }
    
    public int countConsistentStrings(String allowed, String[] words) {
        int allowedChars = markCharactersOf(allowed);
        int answer = 0;
        
        for (String word : words) {
            int wordInWords = markCharactersOf(word);
            
            if ((wordInWords & allowedChars) == wordInWords)
                answer++;
        }
        
        return answer;
    }
}

Related Topics-
Array
Hash Table
String
Bit Manipulation
