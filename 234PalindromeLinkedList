/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static boolean pal(int arr[], int i) {
        int n = arr.length;
        if(i>=n/2) return true;
        if(arr[i]!=arr[n-i-1]) return false;
        return pal(arr,i+1);
    }

    public boolean isPalindrome(ListNode head) {
        ListNode temp = head;
        int len = 1;

        while(temp.next!=null) {
            len++;
            temp = temp.next;
        }

        temp = head;
        int arr[] = new int[len];
        for(int i=0; i<len; i++) {
            arr[i] = temp.val;
            temp = temp.next;
        }

        return pal(arr,0);
    }
}

/*
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode slow = head, fast = head, prev, temp;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        prev = slow;
        slow = slow.next;
        prev.next = null;
        while (slow != null) {
            temp = slow.next;
            slow.next = prev;
            prev = slow;
            slow = temp;
        }
        fast = head;
        slow = prev;
        while (slow != null) {
            if (fast.val != slow.val) return false;
            fast = fast.next;
            slow = slow.next;
        }
        return true;
    }
}
*/

Related Topics-
Linked List
Two Pointers
Stack
Recursion
