class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<Integer>();
        HashMap<Integer,Integer> map = new HashMap();
        int ans[] = new int[nums1.length];
        for(int i:nums2){
            while(!stack.isEmpty()){
                if(stack.peek() < i){
                    map.put(stack.peek(),i);
                    stack.pop();
                }
                else break;
            }
            stack.push(i);
        }
        
        for(int i=0;i<nums1.length;i++){
            if(map.containsKey(nums1[i]))
            ans[i] = map.get(nums1[i]);
            else ans[i]=-1;
        }
        return ans;
    }
}
/*
        int n = nums2.length;
        int m = nums1.length;
        int ans[] = new int[m];
        HashMap<Integer,Integer> grEl = new HashMap();
        Stack<Integer> stack = new Stack();

        for(int i=n-1; i>=0; i--) {
            if(stack.size()>0) {
                if(stack.size()>0 && stack.peek()<nums2[i]) {
                    stack.pop();
                }
            }
            if(stack.size()==0) grEl.put(nums2[i],-1);
            else grEl.put(nums2[i],stack.peek());
            stack.push(nums2[i]);
        }

        for(int i=0; i<m; i++) {
            ans[i] = grEl.get(nums1[i]);
        }
        return ans;
*/
